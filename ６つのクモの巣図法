import numpy as np
import matplotlib.pyplot as plt

def logistic_map(x, r):
    return r * x * (1 - x)

def cobweb_plot(r, x0=0.2, n_iter=100, n_skip=10):
    x = np.linspace(0, 1, 400)
    y = logistic_map(x, r)
    
    fig, ax = plt.subplots(figsize=(4, 4))
    ax.plot(x, y, 'k', label="$x_{n+1} = r x_n (1 - x_n)$")
    ax.plot(x, x, 'k--', label="$x_{n+1} = x_n$")
    
    x_vals = [x0]
    y_vals = [0]
    for _ in range(n_iter):
        x_next = logistic_map(x_vals[-1], r)
        x_vals.extend([x_vals[-1], x_next])
        y_vals.extend([x_next, x_next])
        if _ >= n_skip:
            ax.plot(x_vals[-2:], y_vals[-2:], 'r')
    
    ax.set_xlim(0, 1)
    ax.set_ylim(0, 1)
    ax.set_title(f'r = {r}')
    ax.set_xlabel('$x_n$')
    ax.set_ylabel('$x_{n+1}$')
    return fig

r_values = [2.5, 3.2, 3.5, 3.7, 3.9, 4.0]
fig, axes = plt.subplots(2, 3, figsize=(12, 8))

for i, r in enumerate(r_values):
    ax = axes[i // 3, i % 3]
    x = np.linspace(0, 1, 400)
    y = logistic_map(x, r)
    
    ax.plot(x, y, 'k')
    ax.plot(x, x, 'k--')
    
    x0 = 0.2
    x_vals = [x0]
    y_vals = [0]
    for _ in range(100):
        x_next = logistic_map(x_vals[-1], r)
        x_vals.extend([x_vals[-1], x_next])
        y_vals.extend([x_next, x_next])
        if _ >= 10:
            ax.plot(x_vals[-2:], y_vals[-2:], 'r')
    
    ax.set_xlim(0, 1)
    ax.set_ylim(0, 1)
    ax.set_title(f'r = {r}')
    ax.set_xlabel('$x_n$')
    ax.set_ylabel('$x_{n+1}$')

plt.tight_layout()
plt.show()
