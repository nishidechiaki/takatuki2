import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
from scipy.interpolate import make_interp_spline

def func(ver, t, L):
    dvdt = []
    for i in range(n):
        xi = ver[2 * i]
        if i != n - 1:
            xj = ver[2 * (i + 1)]
            hi = xj - xi
            h = hi
        else:
            x0 = ver[0]
            xn = ver[2 * (n - 1)]
            hi = x0 - xn + L
            h = hi
        Vhi = 0.9 * h**2 / (1 + h**2)
        dxdt = ver[2 * i + 1]
        dydt = (Vhi - ver[2 * i + 1])
        dvdt.append(dxdt)
        dvdt.append(dydt)
    return dvdt

def find_local_maxima(data):
    data = np.array(data)
    local_maxima = (data[1:-1] > data[:-2]) & (data[1:-1] > data[2:])
    local_maxima_indices = np.where(local_maxima)[0] + 1
    return local_maxima_indices, data[local_maxima_indices]

def find_local_minima(data):
    data = np.array(data)
    local_minima = (data[1:-1] < data[:-2]) & (data[1:-1] < data[2:])
    local_minima_indices = np.where(local_minima)[0] + 1
    return local_minima_indices, data[local_minima_indices]

# 初期設定
r = 0.2
w = 2
tau = 1.0
n = 12
X0 = [0.1, 0, 0.2, 0, 0.3, 0, 0.4, 0, 0.5, 0, 0.6, 0, 0.7, 0, 0.8, 0, 0.9, 0, 1.0, 0, 1.1, 0, 1.2, 0]
t = np.arange(0, 500, 0.001)
mu_values = []

rt_values = np.arange(0.2, 0.31, 0.01)

for rt_target in rt_values:
    lambda_at_rt_target = []  # rt = 0.2におけるλの値を格納するリスト

    for L in np.arange(10, 20.1, 0.1):
        X = odeint(func, X0, t, args=(L,))
        h0 = X[:, 2] - X[:, 0]
        hi = L / n
        h = h0 - hi
        data = h
        indices_max, maxima = find_local_maxima(data)
        indices_min, minima = find_local_minima(data)
        
        # Maxima
        positive_indices = indices_max[maxima > 0]
        positive_maxima = maxima[maxima > 0]
        w = t[positive_indices[1:-1]]
        wa = t[positive_indices[2:]]
        wb = t[positive_indices[:-2]]
        a = data[positive_indices[2:]]
        b = data[positive_indices[:-2]]
        a1 = np.abs(a)
        b1 = np.abs(b)
        r1 = np.log(a1)
        r2 = np.log(b1)
        ramuda = (r1 - r2) / (wa - wb)
        rt = data[positive_indices[1:-1]]
        rt_unique, unique_indices = np.unique(rt, return_index=True)
        ramuda_unique = ramuda[unique_indices]
        closest_index = np.argmin(np.abs(rt_unique - rt_target))
        lambda_at_rt_target.append((rt_unique[closest_index], ramuda_unique[closest_index]))

    # Lの範囲と対応するλの値
    L_values = np.arange(10, 20.1, 0.1)
    lambda_values = [coord[1] for coord in lambda_at_rt_target]  # 数値のみを取り出す

    # Lに対応するxnの値を計算
    xn_values = 12 / L_values

    # xn_valuesとlambda_valuesのペアをソート
    sorted_indices = np.argsort(xn_values)
    xn_values_sorted = xn_values[sorted_indices]
    lambda_values_sorted = np.array(lambda_values)[sorted_indices]

    # 補間
    xn_smooth = np.linspace(xn_values_sorted.min(), xn_values_sorted.max(), 300)
    spl = make_interp_spline(xn_values_sorted, lambda_values_sorted, k=3)  # Cubic spline interpolation
    lambda_smooth = spl(xn_smooth)

    # 最もλ=0に近い点を見つける
    closest_to_zero_index = np.argmin(np.abs(lambda_smooth))
    closest_mu = xn_smooth[closest_to_zero_index]

    mu_values.append(closest_mu)

# プロット
plt.figure(figsize=(10, 6))
plt.plot(rt_values, mu_values, color='b', label='Closest μ values')

# 局所最小点をプロット
minima_indices, minima_values = find_local_minima(mu_values)
plt.scatter(rt_values[minima_indices], minima_values, color='r', marker='o', label='Local Minima')

# グラフの装飾
plt.xlabel('rt')
plt.ylabel('μ')
plt.title('Closest μ values vs rt with Local Minima')
plt.legend()
plt.grid(True)
plt.show()
