import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import fsolve

def logistic_map(x, r):
    return r * x * (1 - x)

def logistic_map_4(x, r):
    x1 = logistic_map(x, r)
    x2 = logistic_map(x1, r)
    x3 = logistic_map(x2, r)
    x4 = logistic_map(x3, r)
    return x4

def logistic_map_4_derivative(x, r):
    h = 1e-6
    return (logistic_map_4(x + h, r) - logistic_map_4(x - h, r)) / (2 * h)

def find_fixed_points(r):
    func = lambda x: logistic_map_4(x, r) - x
    initial_guesses = np.linspace(0, 1, 10)
    solutions = []
    
    for guess in initial_guesses:
        sol = fsolve(func, guess)[0]
        if 0 <= sol <= 1 and not any(np.isclose(sol, s, atol=1e-6) for s in solutions):
            derivative = logistic_map_4_derivative(sol, r)
            if abs(derivative) > 1:
                solutions.append(sol)
    
    return sorted(solutions)

r = 3.5
unstable_fixed_points = find_fixed_points(r)
print(f"r = {r} のときの|f^4'(x)| > 1 となる4周期固定点: {unstable_fixed_points}")

x_vals = np.linspace(0, 1, 1000)
y_vals = [logistic_map_4(x, r) for x in x_vals]

plt.figure(figsize=(8, 6))
plt.plot(x_vals, y_vals, label="$f^4(x)$")
plt.plot(x_vals, x_vals, linestyle='dashed', color='gray')
plt.scatter(unstable_fixed_points, unstable_fixed_points, color='red')
plt.xlabel("x")
plt.ylabel("y")
plt.grid()
plt.show()
