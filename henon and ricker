import numpy as np
import matplotlib.pyplot as plt

def henon_map(x, y, a, b):
    """Compute the next step of the Henon map."""
    x_next = 1 - a * x**2 + y
    y_next = b * x
    return x_next, y_next

# Henon Map Parameters
a = 1.4
b = 0.3
n_steps = 5000
transient = 100  # Ignore initial transient steps

# Initial conditions for Henon Map
x, y = 0.1, 0.1
x_vals, y_vals = [], []

# Generate the Henon map
for _ in range(n_steps):
    x, y = henon_map(x, y, a, b)
    x_vals.append(x)
    y_vals.append(y)

# Remove transient
x_vals = x_vals[transient:]
y_vals = y_vals[transient:]

# Plot the Henon map attractor
plt.figure(figsize=(8, 8))
plt.scatter(x_vals, y_vals, s=0.1, color="blue")
plt.title("Henon Map Attractor")
plt.xlabel("x")
plt.ylabel("y")
plt.grid(True)
plt.show()

# Early Warning Signals Analysis for Henon Map
def calculate_ews(x_vals):
    """Calculate variance and autocorrelation as EWS."""
    # Variance
    variance = np.var(x_vals)

    # Lag-1 autocorrelation
    x_mean = np.mean(x_vals)
    autocorrelation = np.corrcoef(x_vals[:-1] - x_mean, x_vals[1:] - x_mean)[0, 1]

    return variance, autocorrelation

variance, autocorrelation = calculate_ews(x_vals)

print(f"Henon Map - Variance: {variance}")
print(f"Henon Map - Lag-1 Autocorrelation: {autocorrelation}")

# Ricker Model
def ricker_model(x, r, K):
    """Compute the next step of the Ricker model."""
    return x * np.exp(r * (1 - x / K))

# Ricker Model Parameters
r = 2.6  # Growth rate
K = 100  # Carrying capacity
n_steps = 200
transient = 50  # Ignore initial transient steps

# Initial conditions for Ricker Model
x = 10  # Starting population
x_vals = []

# Generate the Ricker model
def generate_ricker(x, r, K, n_steps):
    x_vals = []
    for _ in range(n_steps):
        x = ricker_model(x, r, K)
        x_vals.append(x)
    return x_vals

x_vals = generate_ricker(x, r, K, n_steps)

# Remove transient
x_vals = x_vals[transient:]

# Plot the Ricker model time series
plt.figure(figsize=(10, 6))
plt.plot(x_vals, marker="o", linestyle="-", color="green", markersize=3)
plt.title("Ricker Model Time Series")
plt.xlabel("Time Step")
plt.ylabel("Population")
plt.grid(True)
plt.show()

# Early Warning Signals Analysis for Ricker Model
variance, autocorrelation = calculate_ews(x_vals)

print(f"Ricker Model - Variance: {variance}")
print(f"Ricker Model - Lag-1 Autocorrelation: {autocorrelation}")
